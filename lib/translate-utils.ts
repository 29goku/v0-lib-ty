import { translationDictionary } from './translations'

export const languageNames: Record<string, string> = {
  en: 'English',
  es: 'Espa√±ol',
  fr: 'Fran√ßais',
  it: 'Italiano',
  tr: 'T√ºrk√ße',
  ar: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
  ru: '–†—É—Å—Å–∫–∏–π',
  zh: '‰∏≠Êñá',
  hi: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä'
}

export const languageFlags: Record<string, string> = {
  en: 'üá∫üá∏',
  es: 'üá™üá∏',
  fr: 'üá´üá∑',
  it: 'üáÆüáπ',
  tr: 'üáπüá∑',
  ar: 'üá∏üá¶',
  ru: 'üá∑üá∫',
  zh: 'üá®üá≥',
  hi: 'üáÆüá≥'
}

export function translateText(text: string, targetLanguage: string): string {
  if (targetLanguage === 'de') return text
  
  // Check for pre-translated content first (highest priority)
  // This will be handled by the component using question.translations
  
  // Fallback to word-by-word translation
  let translatedText = text
  
  // Apply translations from dictionary
  Object.entries(translationDictionary).forEach(([german, translations]) => {
    if (translations[targetLanguage as keyof typeof translations]) {
      const regex = new RegExp(`\\b${german.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'gi')
      translatedText = translatedText.replace(regex, translations[targetLanguage as keyof typeof translations] || german)
    }
  })
  
  return translatedText
}
